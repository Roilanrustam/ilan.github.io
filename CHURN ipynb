{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMobn9tLSy7puHTRnN1HuU+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"5rNufLN1xsrn"},"outputs":[],"source":["For subscription-based companies like Netflix and Spotify, it is crucial to retain existing\n","customers since the entire business model relies on plan renewals. If you would like to work\n","as a data scientist for companies like these in the future, it is a good idea to learn about\n","techniques such as customer churn prediction.\n","\n","You can build a churn prediction model and showcase it on your resume, as this is a use case\n","that is relevant to almost every organization and will help your portfolio stand out amongst other data science candidates.\n","In this article, we will show you how to build a customer churn prediction model in Python using the random forests algorithm.\n","We will use the Telco Customer Churn dataset from Kaggle for this analysis. You also need a Python IDE to run the codes provided here,\n","and I suggest using a Jupyter Notebook since the software makes it easy to run code snippets and create visualizations.\n","\n","Bagi perusahaan berbasis langganan seperti Netflix dan Spotify, mempertahankan keberadaan mereka sangatlah penting\n","pelanggan karena seluruh model bisnis bergantung pada pembaruan paket. Jika Anda ingin bekerja\n","sebagai ilmuwan data untuk perusahaan seperti ini di masa depan, ada baiknya untuk mempelajarinya\n","teknik seperti prediksi churn pelanggan.\n","\n","Anda dapat membuat model prediksi churn dan menampilkannya di resume Anda, karena ini adalah kasus penggunaan\n","yang relevan bagi hampir semua organisasi dan akan membantu portofolio Anda menonjol di antara kandidat ilmu data lainnya.\n","Pada artikel ini, kami akan menunjukkan cara membuat model prediksi churn pelanggan dengan Python menggunakan algoritma random forest.\n","Kami akan menggunakan kumpulan data Telco Customer Churn dari Kaggle untuk analisis ini. Anda juga memerlukan IDE Python untuk menjalankan kode yang disediakan di sini,\n","dan saya menyarankan menggunakan Jupyter Notebook karena perangkat lunaknya memudahkan menjalankan cuplikan kode dan membuat visualisasi."]},{"cell_type":"code","source":["import pandas as pd"],"metadata":{"id":"Vf19MGsIx9Th","executionInfo":{"status":"ok","timestamp":1699240979402,"user_tz":480,"elapsed":1254,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["from google.colab import files"],"metadata":{"id":"cNEXQjhey66k","executionInfo":{"status":"ok","timestamp":1699240986534,"user_tz":480,"elapsed":10,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"keD9wi3dzDqB","executionInfo":{"status":"ok","timestamp":1699241049100,"user_tz":480,"elapsed":58875,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"d8edad8f-2b2a-4aed-b243-da427ed2d1e3"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-0f00ec73-0664-426e-bd01-972435af80b1\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-0f00ec73-0664-426e-bd01-972435af80b1\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Churn.csv to Churn.csv\n"]}]},{"cell_type":"code","source":["df = pd.read_csv('Churn.csv')"],"metadata":{"id":"LbjU4tqVzPB_","executionInfo":{"status":"ok","timestamp":1699241072059,"user_tz":480,"elapsed":348,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":342},"id":"6DnEJMse0CJU","executionInfo":{"status":"ok","timestamp":1699241076364,"user_tz":480,"elapsed":20,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"646d96bf-9fc5-461d-ee93-59a4eee49750"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   customerID  gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n","0  7590-VHVEG  Female              0     Yes         No       1           No   \n","1  5575-GNVDE    Male              0      No         No      34          Yes   \n","2  3668-QPYBK    Male              0      No         No       2          Yes   \n","3  7795-CFOCW    Male              0      No         No      45           No   \n","4  9237-HQITU  Female              0      No         No       2          Yes   \n","\n","      MultipleLines InternetService OnlineSecurity  ... DeviceProtection  \\\n","0  No phone service             DSL             No  ...               No   \n","1                No             DSL            Yes  ...              Yes   \n","2                No             DSL            Yes  ...               No   \n","3  No phone service             DSL            Yes  ...              Yes   \n","4                No     Fiber optic             No  ...               No   \n","\n","  TechSupport StreamingTV StreamingMovies        Contract PaperlessBilling  \\\n","0          No          No              No  Month-to-month              Yes   \n","1          No          No              No        One year               No   \n","2          No          No              No  Month-to-month              Yes   \n","3         Yes          No              No        One year               No   \n","4          No          No              No  Month-to-month              Yes   \n","\n","               PaymentMethod MonthlyCharges  TotalCharges Churn  \n","0           Electronic check          29.85         29.85    No  \n","1               Mailed check          56.95        1889.5    No  \n","2               Mailed check          53.85        108.15   Yes  \n","3  Bank transfer (automatic)          42.30       1840.75    No  \n","4           Electronic check          70.70        151.65   Yes  \n","\n","[5 rows x 21 columns]"],"text/html":["\n","  <div id=\"df-5e29ab00-7dc9-4ac8-bc41-7c3aabcac8ed\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customerID</th>\n","      <th>gender</th>\n","      <th>SeniorCitizen</th>\n","      <th>Partner</th>\n","      <th>Dependents</th>\n","      <th>tenure</th>\n","      <th>PhoneService</th>\n","      <th>MultipleLines</th>\n","      <th>InternetService</th>\n","      <th>OnlineSecurity</th>\n","      <th>...</th>\n","      <th>DeviceProtection</th>\n","      <th>TechSupport</th>\n","      <th>StreamingTV</th>\n","      <th>StreamingMovies</th>\n","      <th>Contract</th>\n","      <th>PaperlessBilling</th>\n","      <th>PaymentMethod</th>\n","      <th>MonthlyCharges</th>\n","      <th>TotalCharges</th>\n","      <th>Churn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>7590-VHVEG</td>\n","      <td>Female</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>1</td>\n","      <td>No</td>\n","      <td>No phone service</td>\n","      <td>DSL</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Electronic check</td>\n","      <td>29.85</td>\n","      <td>29.85</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5575-GNVDE</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>34</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>...</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>One year</td>\n","      <td>No</td>\n","      <td>Mailed check</td>\n","      <td>56.95</td>\n","      <td>1889.5</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3668-QPYBK</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>2</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>...</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Mailed check</td>\n","      <td>53.85</td>\n","      <td>108.15</td>\n","      <td>Yes</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7795-CFOCW</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>45</td>\n","      <td>No</td>\n","      <td>No phone service</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>...</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>One year</td>\n","      <td>No</td>\n","      <td>Bank transfer (automatic)</td>\n","      <td>42.30</td>\n","      <td>1840.75</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>9237-HQITU</td>\n","      <td>Female</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>2</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Fiber optic</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Electronic check</td>\n","      <td>70.70</td>\n","      <td>151.65</td>\n","      <td>Yes</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 21 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5e29ab00-7dc9-4ac8-bc41-7c3aabcac8ed')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5e29ab00-7dc9-4ac8-bc41-7c3aabcac8ed button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5e29ab00-7dc9-4ac8-bc41-7c3aabcac8ed');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b531b1e3-b28d-432e-ac48-478906da8e71\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b531b1e3-b28d-432e-ac48-478906da8e71')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b531b1e3-b28d-432e-ac48-478906da8e71 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# the dataframe has 21 columns related to telecom user subscription behavior.\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0vEXtXhy0KXa","executionInfo":{"status":"ok","timestamp":1699241083229,"user_tz":480,"elapsed":330,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"18e06dca-1cbc-40ac-8c9e-19a04caf2b07"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 7043 entries, 0 to 7042\n","Data columns (total 21 columns):\n"," #   Column            Non-Null Count  Dtype  \n","---  ------            --------------  -----  \n"," 0   customerID        7043 non-null   object \n"," 1   gender            7043 non-null   object \n"," 2   SeniorCitizen     7043 non-null   int64  \n"," 3   Partner           7043 non-null   object \n"," 4   Dependents        7043 non-null   object \n"," 5   tenure            7043 non-null   int64  \n"," 6   PhoneService      7043 non-null   object \n"," 7   MultipleLines     7043 non-null   object \n"," 8   InternetService   7043 non-null   object \n"," 9   OnlineSecurity    7043 non-null   object \n"," 10  OnlineBackup      7043 non-null   object \n"," 11  DeviceProtection  7043 non-null   object \n"," 12  TechSupport       7043 non-null   object \n"," 13  StreamingTV       7043 non-null   object \n"," 14  StreamingMovies   7043 non-null   object \n"," 15  Contract          7043 non-null   object \n"," 16  PaperlessBilling  7043 non-null   object \n"," 17  PaymentMethod     7043 non-null   object \n"," 18  MonthlyCharges    7043 non-null   float64\n"," 19  TotalCharges      7043 non-null   object \n"," 20  Churn             7043 non-null   object \n","dtypes: float64(1), int64(2), object(18)\n","memory usage: 1.1+ MB\n"]}]},{"cell_type":"code","source":["Each user is identified through a unique customer ID. There are 19 independent variables\n","used to predict the target feature – customer churn. In this dataset,\n"," customer churn is defined as users who have left within the last month.\n","Let’s count the number of customers in the dataset who have churned:"],"metadata":{"id":"6TdHDmwT0a3h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df[\"Churn\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nc-EFE0A1HJf","executionInfo":{"status":"ok","timestamp":1699241090559,"user_tz":480,"elapsed":341,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"f8bcb610-2256-474c-e1a4-19c62415ae9c"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["No     5174\n","Yes    1869\n","Name: Churn, dtype: int64"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","import numpy as np"],"metadata":{"id":"6trDUjus1ixe","executionInfo":{"status":"ok","timestamp":1699241098373,"user_tz":480,"elapsed":1424,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["cols =['gender','SeniorCitizen','Partner','Dependents']\n","numerical = cols"],"metadata":{"id":"jbFiVAGP1wkU","executionInfo":{"status":"ok","timestamp":1699241153125,"user_tz":480,"elapsed":333,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(20,4))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"wTWlrxCN3l9d","executionInfo":{"status":"ok","timestamp":1699241155204,"user_tz":480,"elapsed":24,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"c93024da-af8c-405d-9c85-4fdbacfcfc87"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Figure size 2000x400 with 0 Axes>"]},"metadata":{},"execution_count":10},{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x400 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["for i, col in enumerate(numerical):\n","    ax = plt.subplot(1, len(numerical), i+1)\n","    sns.countplot(x=str(col), data=df)\n","    ax.set_title(f\"{col}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"vMYxd9pzH612","executionInfo":{"status":"ok","timestamp":1699241159625,"user_tz":480,"elapsed":1560,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"953083f0-dd5e-4d49-fd05-872d86351ffe"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["Most customers in the dataset are younger individuals without a dependent.\n"," There is an equal distribution of user gender and marital status.\n"," Now, let’s look into the relationship between cost and customer churn. In the real world, users\n"," tend to unsubscribe to their mobile service provider and switch to a different brand\n"," if they find the monthly subscription cost too high. Let’s check if that behavior is reflected in our dataset:"],"metadata":{"id":"l3AdK-YYIlt8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sns.boxplot(x='Churn', y='MonthlyCharges', data=df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"BHI_eVaGIv-G","executionInfo":{"status":"ok","timestamp":1699241165681,"user_tz":480,"elapsed":22,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"9c72cd09-70cd-41f6-9bbe-475b4a870c46"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Churn', ylabel='MonthlyCharges'>"]},"metadata":{},"execution_count":12},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["The assumption above is true. Customers who churned have a higher median monthly charge than customers who renewed their subscription.\n","\n","Finally, let’s analyze the relationship between customer churn and a few other categorical variables captured in the dataset:"],"metadata":{"id":"ccycbIAuJG0P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cols = ['InternetService',\"TechSupport\",\"OnlineBackup\",\"Contract\"]\n","\n","plt.figure(figsize=(14,4))\n","\n","for i, col in enumerate(cols):\n","    ax = plt.subplot(1, len(cols), i+1)\n","    sns.countplot(x =\"Churn\", hue = str(col), data = df)\n","    ax.set_title(f\"{col}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"id":"PYyS6pcxJ5bi","executionInfo":{"status":"ok","timestamp":1699241178045,"user_tz":480,"elapsed":1499,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"4d78bdf3-506e-490e-97f6-6ae3ec842523"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x400 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["Let’s look into each attribute:\n","\n","InternetService: It is clear from the visual above that customers who use\n","fiber optic Internet churn more often than other users. This might be because\n","fiber Internet is a more expensive service, or this provider doesn’t have good coverage.\n","\n","TechSupport: Many users who churned did not sign up for tech support.\n"," This might mean that these customers did not receive any guidance on\n"," fixing technical issues and decided to stop using the service.\n","\n","OnlineBackup: Many customers who had churned did not sign up for an online backup service for data storage.\n","\n","Contract: Users who churned were almost always on a monthly contract. This makes sense,\n"," since these customers pay for the service on a monthly basis and can easily cancel their s\n"," ubscription before the next payment cycle.\n","\n","Even without building a fancy machine learning model, a simple data-driven\n","analysis like this can help organizations understand why they are losing customers and what they can do about it.\n","For instance, if the company realizes that most of their users who churn have not signed up for\n"," tech support, they can include this as a complimentary service in some of their future product offerings to prevent other customers from leaving.\n"],"metadata":{"id":"NbBvinD8KDgp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Notice that the variable “TotalCharges” has the data type “object,” when it should be a numeric column. Let’s convert this column into a numeric one:\n","df['TotalCharges'] = df['TotalCharges'].apply(lambda x: pd.to_numeric(x, errors='coerce')).dropna()"],"metadata":{"id":"Ykxl8cD2LDm8","executionInfo":{"status":"ok","timestamp":1699241223029,"user_tz":480,"elapsed":420,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["The categorical variables in the dataset need to be converted into a numeric format before we can\n","feed them into the machine learning model. We will perform the encoding using Scikit-Learn’s label encoder.\n","\n","First, let’s take a look at the categorical features in the dataset:"],"metadata":{"id":"bU6eUuPGLuPJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cat_features = df.drop(['customerID','TotalCharges','MonthlyCharges','SeniorCitizen','tenure'],axis=1)\n","\n","cat_features.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"X5iwiS56L0el","executionInfo":{"status":"ok","timestamp":1699241256231,"user_tz":480,"elapsed":378,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"be3ae172-bfc6-45a2-d95d-2325b777b7a9"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   gender Partner Dependents PhoneService     MultipleLines InternetService  \\\n","0  Female     Yes         No           No  No phone service             DSL   \n","1    Male      No         No          Yes                No             DSL   \n","2    Male      No         No          Yes                No             DSL   \n","3    Male      No         No           No  No phone service             DSL   \n","4  Female      No         No          Yes                No     Fiber optic   \n","\n","  OnlineSecurity OnlineBackup DeviceProtection TechSupport StreamingTV  \\\n","0             No          Yes               No          No          No   \n","1            Yes           No              Yes          No          No   \n","2            Yes          Yes               No          No          No   \n","3            Yes           No              Yes         Yes          No   \n","4             No           No               No          No          No   \n","\n","  StreamingMovies        Contract PaperlessBilling              PaymentMethod  \\\n","0              No  Month-to-month              Yes           Electronic check   \n","1              No        One year               No               Mailed check   \n","2              No  Month-to-month              Yes               Mailed check   \n","3              No        One year               No  Bank transfer (automatic)   \n","4              No  Month-to-month              Yes           Electronic check   \n","\n","  Churn  \n","0    No  \n","1    No  \n","2   Yes  \n","3    No  \n","4   Yes  "],"text/html":["\n","  <div id=\"df-3eef3c14-a079-4e07-a96a-fcf13418f84f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>Partner</th>\n","      <th>Dependents</th>\n","      <th>PhoneService</th>\n","      <th>MultipleLines</th>\n","      <th>InternetService</th>\n","      <th>OnlineSecurity</th>\n","      <th>OnlineBackup</th>\n","      <th>DeviceProtection</th>\n","      <th>TechSupport</th>\n","      <th>StreamingTV</th>\n","      <th>StreamingMovies</th>\n","      <th>Contract</th>\n","      <th>PaperlessBilling</th>\n","      <th>PaymentMethod</th>\n","      <th>Churn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Female</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No phone service</td>\n","      <td>DSL</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Electronic check</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Male</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>One year</td>\n","      <td>No</td>\n","      <td>Mailed check</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Male</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Mailed check</td>\n","      <td>Yes</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Male</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No phone service</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>One year</td>\n","      <td>No</td>\n","      <td>Bank transfer (automatic)</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Female</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Fiber optic</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Electronic check</td>\n","      <td>Yes</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3eef3c14-a079-4e07-a96a-fcf13418f84f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3eef3c14-a079-4e07-a96a-fcf13418f84f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3eef3c14-a079-4e07-a96a-fcf13418f84f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-30a896f0-907a-4ae4-bf01-2fbcdd094f04\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-30a896f0-907a-4ae4-bf01-2fbcdd094f04')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-30a896f0-907a-4ae4-bf01-2fbcdd094f04 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["from sklearn import preprocessing\n","\n","le = preprocessing.LabelEncoder()\n","df_cat = cat_features.apply(le.fit_transform)\n","df_cat.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"id":"Wtl6U7HFL97j","executionInfo":{"status":"ok","timestamp":1699241265973,"user_tz":480,"elapsed":324,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"26ec3f0e-0004-4879-dd50-292cdd071931"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   gender  Partner  Dependents  PhoneService  MultipleLines  InternetService  \\\n","0       0        1           0             0              1                0   \n","1       1        0           0             1              0                0   \n","2       1        0           0             1              0                0   \n","3       1        0           0             0              1                0   \n","4       0        0           0             1              0                1   \n","\n","   OnlineSecurity  OnlineBackup  DeviceProtection  TechSupport  StreamingTV  \\\n","0               0             2                 0            0            0   \n","1               2             0                 2            0            0   \n","2               2             2                 0            0            0   \n","3               2             0                 2            2            0   \n","4               0             0                 0            0            0   \n","\n","   StreamingMovies  Contract  PaperlessBilling  PaymentMethod  Churn  \n","0                0         0                 1              2      0  \n","1                0         1                 0              3      0  \n","2                0         0                 1              3      1  \n","3                0         1                 0              0      0  \n","4                0         0                 1              2      1  "],"text/html":["\n","  <div id=\"df-219c3f9f-e30c-4137-af6e-4cb1ce77718e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>Partner</th>\n","      <th>Dependents</th>\n","      <th>PhoneService</th>\n","      <th>MultipleLines</th>\n","      <th>InternetService</th>\n","      <th>OnlineSecurity</th>\n","      <th>OnlineBackup</th>\n","      <th>DeviceProtection</th>\n","      <th>TechSupport</th>\n","      <th>StreamingTV</th>\n","      <th>StreamingMovies</th>\n","      <th>Contract</th>\n","      <th>PaperlessBilling</th>\n","      <th>PaymentMethod</th>\n","      <th>Churn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-219c3f9f-e30c-4137-af6e-4cb1ce77718e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-219c3f9f-e30c-4137-af6e-4cb1ce77718e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-219c3f9f-e30c-4137-af6e-4cb1ce77718e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2b854d71-4c5e-4f58-aa0c-bba979f985e9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2b854d71-4c5e-4f58-aa0c-bba979f985e9')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2b854d71-4c5e-4f58-aa0c-bba979f985e9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["num_features = df[['customerID','TotalCharges','MonthlyCharges','SeniorCitizen','tenure']]\n","finaldf = pd.merge(num_features, df_cat, left_index=True, right_index=True)"],"metadata":{"id":"ZiaRudtcMKb0","executionInfo":{"status":"ok","timestamp":1699241316988,"user_tz":480,"elapsed":326,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["As mentioned above, the dataset is imbalanced, which means that a majority of values in the target variable belong\n","to a single class. Most customers in the dataset did not churn - only 27% of them did.\n","This class imbalance problem can lead to an underperforming machine learning model. Some algorithms\n","that train on an imbalanced dataset always end up predicting the majority class. In our case,\n","for instance, the model may predict that none of the customers churned. While a model like this will be highly\n","accurate (in this case it will be correct 73% of the time), it is of no value to us since it is always predicting a single outcome.\n","There are a variety of techniques that can be used to overcome the class imbalance problem in machine learning.\n","In this tutorial, we will use a technique called oversampling. This is a process that involves randomly selecting samples\n","from the minority class and adding it to the training dataset. We are going to oversample the minority class until the\n","number of data points are equal to that of the majority class.\n","Before we oversample, let’s do a train-test split. We will oversample solely\n","on the training dataset, as the test dataset must be representative of the true population:"],"metadata":{"id":"3FUVo5KaM1Ua"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Now, let’s oversample the training dataset\n","from imblearn.over_sampling import SMOTE\n","\n","oversample = SMOTE(k_neighbors=5)\n","X_smote, y_smote = oversample.fit_resample(X_train, y_train)\n","X_train, y_train = X_smote, y_smote"],"metadata":{"id":"K9C9u9H3PP2N","executionInfo":{"status":"ok","timestamp":1699241991494,"user_tz":480,"elapsed":379,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["y_train.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"envXgkJ6QEUV","executionInfo":{"status":"ok","timestamp":1699241996775,"user_tz":480,"elapsed":323,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"2762eda1-fbc1-4af5-ae6b-7d1d8c2fcab6"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    3452\n","1    3452\n","Name: Churn, dtype: int64"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["There should be 3,452 values in each class, which means that the training dataset is now balanced."],"metadata":{"id":"0-_nuDT1QS6W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# We will now build a random forest classifier to predict customer churn:\n","from sklearn.ensemble import RandomForestClassifier\n","\n","rf = RandomForestClassifier(random_state=46)\n","rf.fit(X_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"HewmIMlNQaWu","executionInfo":{"status":"ok","timestamp":1699242002930,"user_tz":480,"elapsed":1113,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"445d4bfb-0ed0-43ed-91df-5915539bed8e"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=46)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=46)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=46)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["# Let’s evaluate the model predictions on the test dataset:\n","from sklearn.metrics import accuracy_score\n","\n","preds = rf.predict(X_test)\n","print(accuracy_score(prpeds,y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LsSlf9PoQl20","executionInfo":{"status":"ok","timestamp":1699242009652,"user_tz":480,"elapsed":352,"user":{"displayName":"NISA OFFICIAL","userId":"01064782772824182915"}},"outputId":"00ea3a67-4dbf-4130-c4c0-c8eb1b9ab296"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["0.7699267557087462\n"]}]}]}